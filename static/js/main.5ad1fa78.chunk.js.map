{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","squares","this","state","slice","calculateWinner","xIsNext","setState","renderSquare","React","Component","Game","history","Array","fill","stepNumber","step","length","concat","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"gOAIA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKLC,E,0KACQC,GACV,IAAMC,EAAUC,KAAKC,MAAMF,QAAQG,QAChCC,EAAgBJ,IAAYA,EAAQD,KAEvCC,EAAQD,GAAKE,KAAKC,MAAMG,QAAU,IAAM,IACxCJ,KAAKK,SAAS,CACZN,QAAUA,EACVK,SAAWJ,KAAKC,MAAMG,a,mCAIbN,GAAI,IAAD,OACd,OACE,cAACN,EAAD,CACEI,MAAOI,KAAKP,MAAMM,QAAQD,GAC1BH,QAAU,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAMvC,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGM,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,MAErB,sBAAKZ,UAAU,YAAf,UACGM,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,MAErB,sBAAKZ,UAAU,YAAf,UACGM,KAAKM,aAAa,GAClBN,KAAKM,aAAa,GAClBN,KAAKM,aAAa,a,GArCTC,IAAMC,WA4CpBC,E,kDACJ,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CACXS,QAAS,CAAC,CACRX,QAASY,MAAM,GAAGC,KAAK,QAGzBC,WAAY,EACZT,SAAU,GARK,E,mDAYZU,GACLd,KAAKK,SAAS,CACZQ,WAAYC,EACZV,QAAUU,EAAO,IAAO,M,kCAGhBhB,GACV,IAAMY,EAAUV,KAAKC,MAAMS,QAAQR,MAAM,EAAGF,KAAKC,MAAMY,WAAa,GAE9Dd,EADUW,EAAQA,EAAQK,OAAS,GACjBhB,QAAQG,QAG7BC,EAAgBJ,IAAYA,EAAQD,KAEvCC,EAAQD,GAAKE,KAAKC,MAAMG,QAAU,IAAM,IAExCJ,KAAKK,SAAS,CAEZK,QAAUA,EAAQM,OAAO,CAAC,CACxBjB,QAAUA,KAGZc,WAAYH,EAAQK,OACpBX,SAAWJ,KAAKC,MAAMG,a,+BAGhB,IAaJa,EAbG,OACDP,EAAUV,KAAKC,MAAMS,QACrBQ,EAAUR,EAAQV,KAAKC,MAAMY,YAC7BM,EAAShB,EAAgBe,EAAQnB,SAEjCqB,EAAQV,EAAQW,KAAK,SAACP,EAAMQ,GAChC,IAAMC,EAAOD,EAAO,eAAgBA,EAAO,cAC3C,OACE,6BACE,yBAAQ3B,QAAU,kBAAM,EAAK6B,OAAOF,IAApC,cAA6CC,EAA7C,QADOD,MAUb,OAHaL,EAAVE,EAAgB,kBAAcA,GACjB,iBAAmBnB,KAAKC,MAAMG,QAAU,IAAM,KAG5D,sBAAKV,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEE,QAASmB,EAAQnB,QACjBJ,QAAS,SAACG,GAAD,OAAO,EAAK2B,YAAY3B,QAGrC,sBAAKJ,UAAU,YAAf,UACE,8BAAMuB,IACN,6BAAKG,c,GAnEIb,IAAMC,WAiFzB,SAASL,EAAgBJ,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA5B,EAAI,EAAGA,EAAI4B,EAAMX,OAAQjB,IAAK,CAAC,IAAD,cACnB4B,EAAM5B,GADa,GAC9B6B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAACtB,EAAD,IACAuB,SAASC,eAAe,W","file":"static/js/main.5ad1fa78.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick} >\r\n      {props.value}\r\n    </button>\r\n  )\r\n}\r\n  \r\n  class Board extends React.Component {\r\n    handleClick(i) {\r\n      const squares = this.state.squares.slice();\r\n      if(calculateWinner(squares) || squares[i]){ return; }\r\n      \r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        squares : squares,\r\n        xIsNext : !this.state.xIsNext,\r\n      });\r\n    }\r\n\r\n    renderSquare(i) {\r\n      return (\r\n        <Square \r\n          value={this.props.squares[i]}\r\n          onClick={ () => this.props.onClick(i) } \r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n\r\n        stepNumber: 0,\r\n        xIsNext : true,\r\n      }\r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      })\r\n    }\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice(); //create a copy for immutability\r\n      \r\n      // if there is a winner or this square has been used then do nothing\r\n      if(calculateWinner(squares) || squares[i]){ return; }\r\n\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n      this.setState({\r\n        // NOTE: concat does not mutate the original array\r\n        history : history.concat([{\r\n          squares : squares,\r\n        }]),\r\n\r\n        stepNumber: history.length,\r\n        xIsNext : !this.state.xIsNext,\r\n      })\r\n    }\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n\r\n      const moves = history.map( (step, move) => {\r\n        const desc = move ? 'Go to move #' +move : 'Go to start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={ () => this.jumpTo(move)}> {desc} </button>\r\n          </li>\r\n        )\r\n      });\r\n      let status;\r\n\r\n      if(winner) { status = `Winner: ${winner}`; }\r\n      else { status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); }  \r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }"],"sourceRoot":""}